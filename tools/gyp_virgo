#!/usr/bin/env python
import os
import sys

script_dir = os.path.dirname(__file__)
src_root = os.path.normpath(os.path.join(script_dir, os.pardir))

sys.path.insert(0, os.path.join(src_root, 'tools', 'gyp', 'pylib'))
import gyp

# Directory within which we want all generated files (including Makefiles)
# to be written.
output_dir = os.path.join(os.path.abspath(src_root), 'out')


def run_gyp(args):
    rc = gyp.main(args)
    if rc != 0:
        print 'Error running GYP'
        sys.exit(rc)

if __name__ == '__main__':
    args = sys.argv[1:]

    # GYP bug.
    # On msvs it will crash if it gets an absolute path.
    # On Mac/make it will crash if it doesn't get an absolute path.

    if sys.platform == 'win32':
        root = src_root
    else:
        root = os.path.abspath(src_root)

    args.append(os.path.join(root, 'virgo.gyp'))

    for gypi in ['common.gypi', 'options.gypi', 'platform.gypi']:
        fp = os.path.join(root, gypi)
        if os.path.exists(fp):
            args.extend(['-I', fp])

    args.append('--depth=' + src_root)

    if sys.platform == "darwin":
        args.extend(['-f', 'make'])
        args.extend(['-f', 'xcode'])

    # There's a bug with windows which doesn't allow this feature.
    if sys.platform != 'win32'  and 'ninja' not in args:

        # Tell gyp to write the Makefiles into output_dir
        args.extend(['--generator-output', output_dir])

        # Tell make to write its output into the same dir
        args.extend(['-Goutput_dir=' + output_dir])

    args.append('-Dtarget_arch=ia32')
    args.append('-Dcomponent=static_library')
    args.append('-Dlibrary=static_library')
    print(args)
    run_gyp(args)
